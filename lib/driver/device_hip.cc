// !!! This is a file automatically generated by hipify!!!
/* Copyright 2015-2017 Philippe Tillet
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files
* (the "Software"), to deal in the Software without restriction,
* including without limitation the rights to use, copy, modify, merge,
* publish, distribute, sublicense, and/or sell copies of the Software,
* and to permit persons to whom the Software is furnished to do so,
* subject to the following conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include <map>
#include <algorithm>
#include <sstream>
#include <cstring>
#include <memory>
#include "triton/driver/device_hip.h"
#include "triton/driver/context_hip.h"
#include "triton/codegen/target.h"

namespace triton
{

namespace driver
{

/* ------------------------ */
//          Host            //
/* ------------------------ */

std::unique_ptr<codegen::target> host_device::make_target() const {
  return std::unique_ptr<codegen::cpu_target>(new codegen::cpu_target());
}


/* ------------------------ */
//         CUDA             //
/* ------------------------ */

// information query
template<hipDeviceAttribute_t attr>
int hip_device::hipGetInfo() const{
  std::cout << "hip_device::hipGetInfo" << std::endl;
  int res;
  dispatch::hipDeviceGetAttribute(&res, attr, *cu_);
  return res;
}

// convert to nvml
nvmlDevice_t hip_device::nvml_device() const{
  std::cout << "hip_device::nvml_device" << std::endl;
  std::map<std::string, nvmlDevice_t> map;
  std::string key = pci_bus_id();
  if(map.find(key)==map.end()){
    nvmlDevice_t device;
    dispatch::nvmlDeviceGetHandleByPciBusId_v2(key.c_str(), &device);
    return map.insert(std::make_pair(key, device)).first->second;
  }
  return map.at(key);
}

// number of address bits
size_t hip_device::address_bits() const{
  std::cout << "hip_device::address_bits" << std::endl;
  return sizeof(size_t)*8;
}

// name
std::string hip_device::name() const {
    std::cout << "hip_device::name" << std::endl;
    char tmp[128];
    dispatch::hipDeviceGetName(tmp, 128, *cu_);
    return std::string(tmp);
}

// PCI bus ID
std::string hip_device::pci_bus_id() const{
  std::cout << "hip_device::pci_bus_id" << std::endl;
  char tmp[128];
  dispatch::hipDeviceGetPCIBusId(tmp, 128, *cu_);
  return std::string(tmp);
}

// force the device to be interpreted as a particular cc
void hip_device::interpret_as(int cc){
  std::cout << "hip_device::interpret_as" << std::endl;
  interpreted_as_ = std::make_shared<int>(cc);
}

// compute capability
int hip_device::compute_capability() const {
  std::cout << "hip_device::compute_capability" << std::endl;
  if(interpreted_as_)
    return *interpreted_as_;
  size_t major = hipGetInfo<hipDeviceAttributeComputeCapabilityMajor>();
  size_t minor = hipGetInfo<hipDeviceAttributeComputeCapabilityMinor>();
  int sm=major*10 + minor;
  std::cout << "hip_device::compute_capability: " << sm << std::endl;
  return sm;
}

// maximum number of threads per block
size_t hip_device::max_threads_per_block() const {
  std::cout << "hip_device::max_threads_per_block" << std::endl;
  return hipGetInfo<hipDeviceAttributeMaxThreadsPerBlock>();
}

// maximum amount of shared memory per block
size_t hip_device::max_shared_memory() const {
  std::cout << "hip_device::max_shared_memory" << std::endl;
  return hipGetInfo<hipDeviceAttributeMaxSharedMemoryPerBlock>();
}

// warp size
size_t hip_device::warp_size() const {
  std::cout << "hip_device::warp_size" << std::endl;
  return hipGetInfo<hipDeviceAttributeWarpSize>();
}


// maximum block dimensions
std::vector<size_t> hip_device::max_block_dim() const {
  std::cout << "hip_device::max_block_dim" << std::endl;
  std::vector<size_t> result(3);
  result[0] = hipGetInfo<hipDeviceAttributeMaxBlockDimX>();
  result[1] = hipGetInfo<hipDeviceAttributeMaxBlockDimY>();
  result[2] = hipGetInfo<hipDeviceAttributeMaxBlockDimZ>();
  return result;
}

// current SM clock
size_t hip_device::current_sm_clock() const{
  std::cout << "hip_device::current_sm_clock" << std::endl;
  unsigned int result;
  dispatch::nvmlDeviceGetClockInfo(nvml_device(), NVML_CLOCK_SM, &result);
  return result;
}

// max SM clock
size_t hip_device::max_sm_clock() const{
  std::cout << "hip_device::max_sm_clock" << std::endl;
  unsigned int result;
  dispatch::nvmlDeviceGetMaxClockInfo(nvml_device(), NVML_CLOCK_SM, &result);
  return result;
}

// current memory clock
size_t hip_device::current_mem_clock() const{
  std::cout << "hip_device::current_mem_clock" << std::endl;
  unsigned int result;
  dispatch::nvmlDeviceGetClockInfo(nvml_device(), NVML_CLOCK_MEM, &result);
  return result;
}

// max memory clock
size_t hip_device::max_mem_clock() const{
  std::cout << "hip_device::max_mem_clock" << std::endl;
  unsigned int result;
  dispatch::nvmlDeviceGetMaxClockInfo(nvml_device(), NVML_CLOCK_MEM, &result);
  return result;
}

// max memory clock
void hip_device::set_max_clock() {
  std::cout << "hip_device::set_max_clock" << std::endl;
  dispatch::nvmlDeviceSetApplicationsClocks(nvml_device(), max_mem_clock(), max_sm_clock());
}

// print infos
std::string hip_device::infos() const{
  std::cout << "hip_device::infos" << std::endl;
  std::ostringstream oss;
  std::vector<size_t> max_wi_sizes = max_block_dim();
  oss << "Platform: CUDA" << std::endl;
  oss << "Name: " << name() << std::endl;
  oss << "Maximum total work-group size: " << max_threads_per_block() << std::endl;
  oss << "Maximum individual work-group sizes: " << max_wi_sizes[0] << ", " << max_wi_sizes[1] << ", " << max_wi_sizes[2] << std::endl;
  oss << "Local memory size: " << max_shared_memory() << std::endl;
  return oss.str();
}

// target
std::unique_ptr<codegen::target> hip_device::make_target() const {
  std::cout << "hip_device::make_target" << std::endl;
  // TODO: change to amd target
  // return std::unique_ptr<codegen::nvidia_cu_target>(new codegen::nvidia_cu_target(compute_capability()));
  return std::unique_ptr<codegen::amd_cl_target>(new codegen::amd_cl_target());
}


}

}

